# This File is Generated by AI.
# (Give me some slack man, I dunna how to use fucken Matrix Builds)

name: Build Delta

on:
  push:
    branches: [ master]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: delta
            asset_name: delta-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: delta.exe
            asset_name: delta-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: delta
            asset_name: delta-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: delta
            asset_name: delta-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install LLVM (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y llvm-17-dev libclang-17-dev clang-17 libpolly-17-dev

    - name: Install LLVM (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        brew install llvm@17
        echo "LLVM_SYS_170_PREFIX=$(brew --prefix llvm@17)" >> $GITHUB_ENV

    - name: Install LLVM (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install llvm --version=17.0.6
        echo "LLVM_SYS_170_PREFIX=C:\Program Files\LLVM" >> $env:GITHUB_ENV

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Run tests
      run: cargo test --verbose

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare artifact (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}
        chmod +x artifacts/${{ matrix.asset_name }}

    - name: Prepare artifact (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir artifacts
        copy target\${{ matrix.target }}\release\${{ matrix.artifact_name }} artifacts\${{ matrix.asset_name }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: delta-${{ matrix.target }}
        path: artifacts/${{ matrix.asset_name }}
        retention-days: 30

  create-release-artifacts:
    name: Create release artifacts
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Create release archive
      run: |
        cd artifacts
        for dir in */; do
          cd "$dir"
          tar -czf "../${dir%-*}.tar.gz" *
          cd ..
        done

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}