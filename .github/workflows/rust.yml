name: Build Delta

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:

  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: self-hosted
            runner_os: linux
            target: x86_64-unknown-linux-gnu
            artifact_name: delta
            asset_name: delta-linux-x86_64
          - os: self-hosted
            runner_os: windows
            target: x86_64-pc-windows-msvc
            artifact_name: delta.exe
            asset_name: delta-windows-x86_64.exe
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: delta
            asset_name: delta-macos-aarch64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust (macOS)
      if: matrix.os != 'self-hosted' && matrix.runner_os != 'linux'
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    - name: Install Rust (Linux)
      if: matrix.runner_os == 'linux'
      run: |
        # Check if Rust is already installed
        if command -v cargo &> /dev/null; then
          echo "Rust is already installed:"
          cargo --version
          rustc --version
        else
          echo "Installing Rust..."
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          source ~/.cargo/env
        fi
        
        # Add cargo to PATH for subsequent steps
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
        # Install target if needed
        rustup target add ${{ matrix.target }}
    - name: Install Rust (Windows)
      if: matrix.runner_os == 'windows'
      run: |
        # Check if Rust is already installed
        $cargoPath = "$env:USERPROFILE\.cargo\bin\cargo.exe"
        if (Test-Path $cargoPath) {
          Write-Host "Rust is already installed:"
          & $cargoPath --version
          & "$env:USERPROFILE\.cargo\bin\rustc.exe" --version
        } else {
          Write-Host "Installing Rust..."
          # Download and install rustup
          Invoke-WebRequest -Uri "https://win.rustup.rs" -OutFile "rustup-init.exe"
          .\rustup-init.exe -y --default-toolchain stable --profile default
          
          # Remove the installer
          Remove-Item "rustup-init.exe" -ErrorAction SilentlyContinue
        }
        
        # Always add cargo to PATH for subsequent steps
        $cargoDir = "$env:USERPROFILE\.cargo\bin"
        echo $cargoDir >> $env:GITHUB_PATH
        
        # Verify installation using full path
        if (Test-Path "$cargoDir\cargo.exe") {
          Write-Host "Cargo found, installing target..."
          & "$cargoDir\cargo.exe" --version
          & "$cargoDir\rustup.exe" target add ${{ matrix.target }}
          
          # Verify target installation
          & "$cargoDir\rustc.exe" --version
          & "$cargoDir\cargo.exe" --version
        } else {
          Write-Host "ERROR: Cargo not found after installation"
          exit 1
        }
      shell: powershell

    - name: Install LLVM (Linux)
      if: matrix.runner_os == 'linux'
      run: |
        # Install build essentials first
        sudo apt-get update
        sudo apt-get install -y build-essential gcc g++ make
        
        # Check if LLVM is already installed
        if command -v llvm-config-17 &> /dev/null; then
          echo "LLVM 17 is already installed:"
          llvm-config-17 --version
        else
          echo "Installing LLVM 17..."
          sudo apt-get install -y llvm-17-dev libclang-17-dev clang-17 libpolly-17-dev
        fi
        
        # Verify compiler installation
        gcc --version
        g++ --version
        
        # Set environment variables
        echo "LLVM_SYS_170_PREFIX=/usr/lib/llvm-17" >> $GITHUB_ENV
        echo "LIBCLANG_PATH=/usr/lib/llvm-17/lib" >> $GITHUB_ENV
        echo "/usr/lib/llvm-17/bin" >> $GITHUB_PATH
    - name: Install LLVM (macOS)
      if: matrix.os == 'macos-latest' && matrix.target == 'aarch64-apple-darwin'
      run: |
        # Install LLVM for ARM64
        brew install llvm@17
        echo "LLVM_SYS_170_PREFIX=$(brew --prefix llvm@17)" >> $GITHUB_ENV
        echo "CC=$(brew --prefix llvm@17)/bin/clang" >> $GITHUB_ENV
        echo "CXX=$(brew --prefix llvm@17)/bin/clang++" >> $GITHUB_ENV
    - name: Check LLVM (Windows)
      if: matrix.runner_os == 'windows'
      run: |
        # Set environment variables for pre-installed LLVM at C:\llvm
        $llvmPath = "C:\llvm"
        Write-Host "Setting LLVM_SYS_170_PREFIX to: $llvmPath"
        echo "LLVM_SYS_170_PREFIX=$llvmPath" >> $env:GITHUB_ENV
        echo "$llvmPath\bin" >> $env:GITHUB_PATH
        
        # Set additional environment variables that some Rust crates might need
        echo "LIBCLANG_PATH=$llvmPath\bin" >> $env:GITHUB_ENV
        echo "LLVM_CONFIG_PATH=$llvmPath\bin\llvm-config.exe" >> $env:GITHUB_ENV
        
        # Verify LLVM installation
        $llvmConfig = "$llvmPath\bin\llvm-config.exe"
        $clang = "$llvmPath\bin\clang.exe"
        
        Write-Host "Checking for LLVM executables..."
        if (Test-Path $llvmConfig) {
          Write-Host "llvm-config found, getting version and configuration..."
          & $llvmConfig --version
          & $llvmConfig --prefix
          & $llvmConfig --bindir
          & $llvmConfig --libdir
          & $llvmConfig --includedir
        } else {
          Write-Host "ERROR: llvm-config.exe not found at $llvmConfig"
          Write-Host "Contents of $llvmPath\bin:"
          Get-ChildItem -Path "$llvmPath\bin" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  $($_.Name)" }
          exit 1
        }
        
        if (Test-Path $clang) {
          Write-Host "clang found, getting version..."
          & $clang --version
        } else {
          Write-Host "WARNING: clang.exe not found at $clang"
          Write-Host "This might be okay if your project doesn't require clang directly"
        }
        
        # Verify library directories exist
        $libDir = "$llvmPath\lib"
        $includeDir = "$llvmPath\include"
        
        if (Test-Path $libDir) {
          Write-Host "LLVM lib directory found"
          $libCount = (Get-ChildItem -Path $libDir -Filter "*.lib" | Measure-Object).Count
          Write-Host "Found $libCount .lib files"
        } else {
          Write-Host "WARNING: LLVM lib directory not found at $libDir"
        }
        
        if (Test-Path $includeDir) {
          Write-Host "LLVM include directory found"
        } else {
          Write-Host "WARNING: LLVM include directory not found at $includeDir"
        }
      shell: powershell

    - name: Cache Cargo Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Clean Cargo (Unix)
      if: matrix.os != 'self-hosted'
      run: cargo clean
    - name: Clean Cargo (Windows)
      if: matrix.runner_os == 'windows'
      run: cargo clean
      shell: powershell

    - name: Build release binary (macOS)
      if: matrix.os != 'self-hosted' && matrix.runner_os != 'linux'
      run: cargo build --release --target ${{ matrix.target }}
    - name: Build release binary (Linux)
      if: matrix.runner_os == 'linux'
      run: |
        echo "Building with environment:"
        echo "LLVM_SYS_170_PREFIX = $LLVM_SYS_170_PREFIX"
        echo "LIBCLANG_PATH = $LIBCLANG_PATH"
        echo "PATH includes: $PATH"
        
        cargo build --release --target ${{ matrix.target }}
    - name: Build release binary (Windows)
      if: matrix.runner_os == 'windows'
      run: |
        Write-Host "Building with environment:"
        Write-Host "LLVM_SYS_170_PREFIX = $env:LLVM_SYS_170_PREFIX"
        Write-Host "LIBCLANG_PATH = $env:LIBCLANG_PATH"
        Write-Host "LLVM_CONFIG_PATH = $env:LLVM_CONFIG_PATH"
        Write-Host "PATH includes: $env:PATH"
        
        cargo build --release --target ${{ matrix.target }}
      shell: powershell

    - name: Prepare artifact (macOS)
      if: matrix.os != 'self-hosted' && matrix.runner_os != 'linux'
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}
        chmod +x artifacts/${{ matrix.asset_name }}
    - name: Prepare artifact (Linux)
      if: matrix.runner_os == 'linux'
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}
        chmod +x artifacts/${{ matrix.asset_name }}
    - name: Prepare artifact (Windows)
      if: matrix.runner_os == 'windows'
      run: |
        mkdir artifacts
        copy target\${{ matrix.target }}\release\${{ matrix.artifact_name }} artifacts\${{ matrix.asset_name }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: delta-${{ matrix.target }}
        path: artifacts/${{ matrix.asset_name }}
        retention-days: 60