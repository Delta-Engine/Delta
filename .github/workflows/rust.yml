# This File is Generated by AI.
# (Give me some slack man, I dunna how to use fucken Matrix Builds)

name: Build Delta

on:
  push:
    branches: [ master]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: delta
            asset_name: delta-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: delta.exe
            asset_name: delta-windows-x86_64.exe
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: delta
            asset_name: delta-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install LLVM (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y llvm-17-dev libclang-17-dev clang-17 libpolly-17-dev

    - name: Install LLVM (macOS)
      if: matrix.os == 'macos-latest' && matrix.target == 'aarch64-apple-darwin'
      run: |
        # Install LLVM for ARM64
        brew install llvm@17
        echo "LLVM_SYS_170_PREFIX=$(brew --prefix llvm@17)" >> $GITHUB_ENV
        echo "CC=$(brew --prefix llvm@17)/bin/clang" >> $GITHUB_ENV
        echo "CXX=$(brew --prefix llvm@17)/bin/clang++" >> $GITHUB_ENV

    - name: Cache LLVM (Windows)
      if: matrix.os == 'windows-latest'
      id: cache-llvm-windows
      uses: actions/cache@v4
      with:
        path: C:\llvm-17
        key: llvm-17.0.6-windows-x64-minsizerel
        restore-keys: |
          llvm-17.0.6-windows-x64-

    - name: Build LLVM (Windows)
      if: matrix.os == 'windows-latest' && steps.cache-llvm-windows.outputs.cache-hit != 'true'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --force --no-progress
        
        # Download LLVM source
        $llvmUrl = "https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-17.0.6.tar.gz"
        $llvmArchive = "$env:TEMP\llvm-source.tar.gz"
        Invoke-WebRequest -Uri $llvmUrl -OutFile $llvmArchive
        
        # Extract source
        cd $env:TEMP
        tar -xzf llvm-source.tar.gz
        cd llvm-project-llvmorg-17.0.6
        
        # Create build directory and configure
        mkdir build
        cd build
        cmake ..\llvm -DCMAKE_INSTALL_PREFIX=C:\llvm-17 -DCMAKE_BUILD_TYPE=MinSizeRel -DLLVM_ENABLE_ASSERTIONS=OFF -G "Visual Studio 17 2022" -A x64
        
        # Build and install
        cmake --build . --config MinSizeRel --target install --parallel

    - name: Setup LLVM Environment (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Set environment variables
        echo "LLVM_SYS_170_PREFIX=C:\llvm-17" >> $env:GITHUB_ENV
        echo "PATH=C:\llvm-17\bin;$env:PATH" >> $env:GITHUB_ENV

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Clean Cargo
      run: cargo clean

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare artifact (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}
        chmod +x artifacts/${{ matrix.asset_name }}

    - name: Prepare artifact (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir artifacts
        copy target\${{ matrix.target }}\release\${{ matrix.artifact_name }} artifacts\${{ matrix.asset_name }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: delta-${{ matrix.target }}
        path: artifacts/${{ matrix.asset_name }}
        retention-days: 60