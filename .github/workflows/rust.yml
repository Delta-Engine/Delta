# This File is Generated by AI.
# (Give me some slack man, I dunna how to use fucken Matrix Builds)
name: Build Delta
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
env:
  CARGO_TERM_COLOR: always
jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: delta
            asset_name: delta-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: delta.exe
            asset_name: delta-windows-x86_64.exe
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: delta
            asset_name: delta-macos-aarch64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    - name: Install LLVM (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y llvm-17-dev libclang-17-dev clang-17 libpolly-17-dev
    - name: Install LLVM (macOS)
      if: matrix.os == 'macos-latest' && matrix.target == 'aarch64-apple-darwin'
      run: |
        # Install LLVM for ARM64
        brew install llvm@17
        echo "LLVM_SYS_170_PREFIX=$(brew --prefix llvm@17)" >> $GITHUB_ENV
        echo "CC=$(brew --prefix llvm@17)/bin/clang" >> $GITHUB_ENV
        echo "CXX=$(brew --prefix llvm@17)/bin/clang++" >> $GITHUB_ENV
    - name: Setup LLVM (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Download pre-built LLVM from Delta-Engine with retry
        for ($i = 1; $i -le 3; $i++) {
          try {
            Write-Host "Download attempt $i..."
            Invoke-WebRequest -Uri "https://github.com/Delta-Engine/llvm-builds-windows/releases/download/v17.0.6/llvm-17.0.6-windows-x64.zip" -OutFile "llvm.zip" -TimeoutSec 600
            break
          } catch {
            Write-Host "Download failed, retrying..."
            Start-Sleep 5
          }
        }
        
        # Extract with PowerShell (more reliable than 7z in CI)
        Write-Host "Extracting LLVM archive..."
        Expand-Archive -Path "llvm.zip" -DestinationPath "." -Force
        
        # Set environment variables for LLVM
        echo "LLVM_SYS_170_PREFIX=${{ github.workspace }}\llvm" >> $env:GITHUB_ENV
        echo "${{ github.workspace }}\llvm\bin" >> $env:GITHUB_PATH
        
        # Verify LLVM installation
        llvm-config.exe --version
        clang.exe --version
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    - name: Clean Cargo
      run: cargo clean
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
    - name: Prepare artifact (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} artifacts/${{ matrix.asset_name }}
        chmod +x artifacts/${{ matrix.asset_name }}
    - name: Prepare artifact (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir artifacts
        copy target\${{ matrix.target }}\release\${{ matrix.artifact_name }} artifacts\${{ matrix.asset_name }}
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: delta-${{ matrix.target }}
        path: artifacts/${{ matrix.asset_name }}
        retention-days: 60
